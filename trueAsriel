_G.targetr = nil
_G.OneTeamhit = false
_G.OneTeam = nil
_G.LockOnhit = false

local m1 = true

local player = game.Players.LocalPlayer
local char = player.Character
local root = char.HumanoidRootPart
local rootpart = char.HumanoidRootPart

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LP = Players.LocalPlayer


local Remotes = {}

for idx, val in pairs(game:GetService("ReplicatedStorage"):GetChildren()) do
    if val:IsA("RemoteEvent") then
        Remotes[val.Name] = val
    end
end

local itemlist = {}

for i,v in pairs(workspace:GetDescendants()) do
    if v:IsA("Tool") then
        --pcall(function ()
        if not table.find(itemlist, v.Name) then
        table.insert(itemlist, v.Name)
        end
        --end)
    end
end

local attack_tools = {
    "Axe",
    "Pickaxe",
    "Crowbar",
    "Hammer",
    "Knife",
    "Fist"
}

local function CheckRange(part1, part2, stud)
    local range = (part1.Position - part2.Position).Magnitude
    if range < stud then
        return true
    end
    return false
end



function anime(id)
				local animation1 = Instance.new("Animation")
				--animation1.Name = "AttackMove"
				animation1.AnimationId = "rbxassetid://"..id
				local anim1 = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(animation1)
				anim1.Name = "AttackMove"
				task.wait()
				anim1:Play()
end


local ToolFinder 

function findtool(toolName)
	if LP.Backpack:FindFirstChild(toolName) then
        ToolFinder = LP.Backpack:FindFirstChild(toolName)
        print("backpack")
		return ToolFinder
	elseif LP.Character:FindFirstChild(toolName) then
		ToolFinder = LP.Character:FindFirstChild(toolName)
		print("backpack")
		return ToolFinder
	elseif workspace:FindFirstChild(toolName) then
        ToolFinder = workspace:FindFirstChild(toolName)
        print("workspace")
		return ToolFinder
    elseif workspace:FindFirstChild(toolName) == nil then
        for i,v in pairs(Players:GetChildren()) do
            if v.Backpack:FindFirstChild(toolName) then
                ToolFinder = v.Backpack:FindFirstChild(toolName)
                return ToolFinder
            end
        end
	end
end

--[[

task.spawn(function()
	while task.wait() do
	task.wait(0.1)
		--if char:FindFirstChild("Animate") then
			for i,v in ipairs(char.Humanoid:GetPlayingAnimationTracks()) do
				--print(v)
				if LP.Character.IsCuffed.Value == false then
				v:Stop()
				end 
			end 
		--end
	end
end)

]]

--for i,v in pairs(LP.Backpack:GetChildren()) do
--    scripts = v:FindFirstChildOfClass("LocalScript") 
--    scripts.Enabled = false
--end

function onChildRemoved(instance)
	if instance.ClassName ~= "Tool" then
		return
	end
	print(instance.Name .. " removed from the workspace")
	local removedtool = instance.Name
	return finedremovedtool(removedtool)
end

function finedremovedtool(finers)
    for _, player in pairs(game.Players:GetPlayers()) do
		if player.Backpack:FindFirstChild(finers) then
            for _, tool in pairs(player.Backpack:GetDescendants()) do
                    if tool:FindFirstChild("ClickDetector") then -- ClickDetector가 있는지 확인
                        warn(player.Name ," ", tool.Parent.Name, " has the tool with ClickDetector")
                        -- 추가 작업을 여기에 추가할 수 있음
                    end
                end
        elseif player.Character:FindFirstChild(finers) then -- 플레이어의 백팩에서 툴을 찾음
			for _, tools in pairs(player.Character:GetDescendants()) do
				if tools:FindFirstChild("ClickDetector") then -- ClickDetector가 있는지 확인
					warn(player.Name ," ", tools.Parent.Name , " has the tool with ClickDetector")
					-- 추가 작업을 여기에 추가할 수 있음
				end
			end
		end
	end
end



function grabRemote()
	pcall(function()
		for idx, plr in pairs(Players:GetPlayers()) do
			if plr ~= LP 
            and CheckRange(LP.Character.HumanoidRootPart, plr.Character.HumanoidRootPart, 20)
			and plr.Character.Hostile.Value 
			and plr.Character.IsHogged.Value == true
            --and LP.Team ~= plr.Team 
            and plr.Character.Humanoid.Health ~= 0 
			then
                print(plr)
				Remotes["Grab"]:FireServer(plr.Character, "Grab")
			end
		end
	end) 
end

local CFFFFFF = false

function CuffRemote()
    if CFFFFFF == false then
        local alreadyProcessedPlayers = {}

        for idx, plr in pairs(Players:GetPlayers()) do
            if plr ~= LP 
                and not alreadyProcessedPlayers[plr]
                and CheckRange(LP.Character.HumanoidRootPart, plr.Character.HumanoidRootPart, 15)
                and plr.Character.Hostile.Value 
                and LP.Team ~= plr.Team 
                and plr.Character.Humanoid.Health ~= 0 
                and (plr.Character.IsCuffed.Value == true or plr.Character.FrontCuffed.Value == true)
            then
                Remotes["UnCuffed"]:FireServer(plr.Character)
                alreadyProcessedPlayers[plr] = true
            end
        end

        -- 실행 후 플레이어를 리셋합니다.
        wait(1) -- 5초 후에 리셋하도록 설정되어 있습니다. 필요에 따라 조정 가능합니다.
        for k, _ in pairs(alreadyProcessedPlayers) do
            alreadyProcessedPlayers[k] = nil
        end

    elseif CFFFFFF == true then
        local alreadyProcessedPlayers = {}

        for idx, plr in pairs(Players:GetPlayers()) do
            if plr ~= LP 
                and not alreadyProcessedPlayers[plr]
                and CheckRange(LP.Character.HumanoidRootPart, plr.Character.HumanoidRootPart, 10)
                and plr.Character.Hostile.Value 
                and LP.Team ~= plr.Team 
                and plr.Character.Humanoid.Health ~= 0 
                and plr.Character.IsCuffed.Value == false
            then
                if player.Character:FindFirstChild("Handcuffs") then
                    Remotes["UnCuffed"]:FireServer(plr.Character)
                    task.wait(0.1)
                    Remotes["IsCuffed"]:FireServer(LP.Character:WaitForChild("Handcuffs"), plr.Character)
                elseif player.Character:FindFirstChild("Handcuffs (fugitive)") then
                    Remotes["UnCuffed"]:FireServer(plr.Character)
                    task.wait(0.1)
                    Remotes["IsCuffed"]:FireServer(LP.Character:WaitForChild("Handcuffs (fugitive)"), plr.Character)
                end
                alreadyProcessedPlayers[plr] = true
            end
        end

        -- 실행 후 플레이어를 리셋합니다.
        wait(1) -- 5초 후에 리셋하도록 설정되어 있습니다. 필요에 따라 조정 가능합니다.
        for k, _ in pairs(alreadyProcessedPlayers) do
            alreadyProcessedPlayers[k] = nil
        end
    end
end

function HogRemote()
    pcall(function()
        local alreadyProcessedPlayers = {}

        for idx, pAlr in pairs(Players:GetPlayers()) do
            if pAlr ~= LP 
                and not alreadyProcessedPlayers[pAlr]
                and CheckRange(LP.Character.HumanoidRootPart, pAlr.Character.HumanoidRootPart, 10)
                and pAlr.Character.Hostile.Value 
                and LP.Team ~= pAlr.Team 
                and pAlr.Character.Humanoid.Health ~= 0 
            then
                --print(pAlr.Name,"Hog")
                if CFFFFFF == false then
                    if pAlr.Character.IsHogged.Value == true then
                        Remotes["IsHog"]:FireServer(pAlr.Character,"UnHog")
                    end
                    --CFFFFFF = true
                elseif CFFFFFF == true then
                    if pAlr.Character.IsHogged.Value == false then
                        Remotes["IsHog"]:FireServer(pAlr.Character,"Hog")
                    end
                end
                alreadyProcessedPlayers[pAlr] = true
            end
        end

        -- 실행 후 플레이어를 리셋합니다.
        wait(1) -- 5초 후에 리셋하도록 설정되어 있습니다. 필요에 따라 조정 가능합니다.
        for k, _ in pairs(alreadyProcessedPlayers) do
            alreadyProcessedPlayers[k] = nil
        end
    end) 
end

function hogcall()
	local yadsfooooo = game:GetService("Players"):FindFirstChild(_G.targetr)
	if yadsfooooo.Character.IsHogged.Value == true then
		Remotes["IsHog"]:FireServer(yadsfooooo.Character,"UnHog")
	elseif yadsfooooo.Character.IsHogged.Value == false then
		Remotes["IsHog"]:FireServer(yadsfooooo.Character,"Hog")
	end
end

function hoglast()
	pcall(function()
		local tool
		for i,v in pairs(attack_tools) do
			local t = LP.Character:FindFirstChild(v)
			if t then
				tool = t
				break
			end
		end
		for idx, plr in pairs(Players:GetPlayers()) do
			if
				plr ~= LP and CheckRange(LP.Character.HumanoidRootPart, plr.Character.HumanoidRootPart, 10)
				and plr.Character.Hostile.Value and LP.Team ~= plr.Team and plr.Character.Humanoid.Health ~= 0 
			then
				if plr.Team ~= LP.Team and _G.LockOnhit == false and plr.Character.IsHogged.Value == false then
					Remotes["IsHog"]:FireServer(plr.Character,"Hog")
					task.wait()
				elseif plr.Team ~= LP.Team and _G.LockOnhit == true and plr.Character.IsHogged.Value == false then
					if plr.Name == _G.targetr then
						Remotes["IsHog"]:FireServer(plr.Character,"Hog")
						task.wait()
					end
				elseif plr.Team ~= LP.Team and _G.LockOnhit == false and plr.Character.IsHogged.Value == true then
					Remotes["IsHog"]:FireServer(plr.Character,"UnHog")
					task.wait()
				elseif plr.Team ~= LP.Team and _G.LockOnhit == true and plr.Character.IsHogged.Value == true then
					if plr.Name == _G.targetr then
						Remotes["IsHog"]:FireServer(plr.Character,"UnHog")
						task.wait()
					end
				end
			end
		end
	end) 
end

function cuffcallsf()
	local yooooos = game:GetService("Players"):FindFirstChild(_G.targetr)
	if yooooos.Character.IsCuffed.Value == true then
			Remotes["UnCuffed"]:FireServer(yooooos.Character)
	elseif yooooos.Character.IsCuffed.Value == false then
			--Remotes["UnCuffed"]:FireServer(yooooo.Character)
			--task.wait(0.1)
			Remotes["IsCuffed"]:FireServer(LP.Character:WaitForChild("Handcuffs (fugitive)"), yooooos.Character)
	end
end

function cuffcalls()
	local yooooo = game:GetService("Players"):FindFirstChild(_G.targetr)
		if yooooo.Character.IsCuffed.Value == true then
			Remotes["UnCuffed"]:FireServer(yooooo.Character)
		elseif yooooo.Character.IsCuffed.Value == false then
			--Remotes["UnCuffed"]:FireServer(yooooo.Character)
			--task.wait(0.1)
			Remotes["IsCuffed"]:FireServer(LP.Character:WaitForChild("Handcuffs"), yooooo.Character)
	end
end


function cufff()
	pcall(function()
		for idx, plr in pairs(Players:GetPlayers()) do
			if
				plr ~= LP and CheckRange(LP.Character.HumanoidRootPart, plr.Character.HumanoidRootPart, 10)
				and plr.Character.Hostile.Value and LP.Team ~= plr.Team and plr.Character.Humanoid.Health ~= 0 
			then
				if plr.Team ~= LP.Team and _G.LockOnhit == false and plr.Character.IsCuffed.Value == false then
					Remotes["IsCuffed"]:FireServer(findtool("Handcuffs (fugitive)"), plr.Character)
						task.wait()
				elseif plr.Team ~= LP.Team and _G.LockOnhit == true and plr.Character.IsCuffed.Value == false then
					if plr.Name == _G.targetr then
						Remotes["IsCuffed"]:FireServer(findtool("Handcuffs (fugitive)"), plr.Character)
						task.wait()
					end
				elseif plr.Team ~= LP.Team and _G.LockOnhit == false and plr.Character.IsCuffed.Value == true then
					Remotes["UnCuffed"]:FireServer(plr.Character)
						task.wait()
				elseif plr.Team ~= LP.Team and _G.LockOnhit == true and plr.Character.IsCuffed.Value == true then
					if plr.Name == _G.targetr then
						Remotes["UnCuffed"]:FireServer(plr.Character)
						task.wait()
					end
				end
			end
		end
	end) 
end

function cufffs()
	pcall(function()
		for idx, plr in pairs(Players:GetPlayers()) do
			if
				plr ~= LP and CheckRange(LP.Character.HumanoidRootPart, plr.Character.HumanoidRootPart, 10)
				and plr.Character.Hostile.Value and LP.Team ~= plr.Team and plr.Character.Humanoid.Health ~= 0 
			then
				if plr.Team ~= LP.Team and _G.LockOnhit == false and plr.Character.IsCuffed.Value == false then
					Remotes["IsCuffed"]:FireServer(findtool("Handcuffs"), plr.Character)
						task.wait()
				elseif plr.Team ~= LP.Team and _G.LockOnhit == true and plr.Character.IsCuffed.Value == false then
					if plr.Name == _G.targetr then
						Remotes["IsCuffed"]:FireServer(findtool("Handcuffs"), plr.Character)
						task.wait()
					end
				elseif plr.Team ~= LP.Team and _G.LockOnhit == false and plr.Character.IsCuffed.Value == true then
						Remotes["UnCuffed"]:FireServer(plr.Character)
						task.wait()
				elseif plr.Team ~= LP.Team and _G.LockOnhit == true and plr.Character.IsCuffed.Value == true then
					if plr.Name == _G.targetr then
						Remotes["UnCuffed"]:FireServer(plr.Character)
						task.wait()
					end
				end
			end
		end
	end) 
end

--[[
function attack()
	pcall(function()
		local tool
		for i,v in pairs(attack_tools) do
			local t = LP.Character:FindFirstChild(v)
			if t then
				tool = t
				break
			end
		end
		for idx, plr in pairs(Players:GetPlayers()) do
			if
				plr ~= LP and CheckRange(LP.Character.HumanoidRootPart, plr.Character.HumanoidRootPart, 15)
				 and plr.Character.Hostile.Value and LP.Team ~= plr.Team and plr.Character.Humanoid.Health ~= 0 
			then
				if CFFFFFFF == false then
					if _G.OneTeamhit == true then
						if plr.Team.Name == _G.OneTeam then
							Remotes["UnCuffed"]:FireServer(plr.Character)
							task.wait()
							Remotes["Combat"]:FireServer(LP.Character, plr.Character.Head, tool)
							task.wait()
						end
					elseif _G.OneTeamhit == false and _G.LockOnhit == false then
						if LP.Team.Name == "Civilian" and plr.Team.Name ~= "Guard" then
							Remotes["UnCuffed"]:FireServer(plr.Character)
							task.wait()
							Remotes["Combat"]:FireServer(LP.Character, plr.Character.Head, tool)
							task.wait()
						elseif LP.Team.Name ~= "Civilian" then
							Remotes["UnCuffed"]:FireServer(plr.Character)
							task.wait()
							Remotes["Combat"]:FireServer(LP.Character, plr.Character.Head, tool)
							task.wait()
						end
					elseif _G.LockOnhit == true then
						if plr.Name == _G.targetr then
							Remotes["UnCuffed"]:FireServer(plr.Character)
							task.wait()
							Remotes["Combat"]:FireServer(LP.Character, plr.Character.Head, tool)
							task.wait()
						end
				elseif CFFFFFFFF == true then
						if plr.Team.Name == _G.OneTeam then
							Remotes["Combat"]:FireServer(LP.Character, plr.Character.Head, tool)
							task.wait()
						end
					elseif _G.OneTeamhit == false and _G.LockOnhit == false then
						if LP.Team.Name == "Civilian" and plr.Team.Name ~= "Guard" then
							Remotes["Combat"]:FireServer(LP.Character, plr.Character.Head, tool)
							task.wait()
						elseif LP.Team.Name ~= "Civilian" then
							Remotes["Combat"]:FireServer(LP.Character, plr.Character.Head, tool)
							task.wait()
						end
					elseif _G.LockOnhit == true then
						if plr.Name == _G.targetr then
							Remotes["Combat"]:FireServer(LP.Character, plr.Character.Head, tool)
							task.wait()
						end
					end
				end
			end
		end
	end) 
end
]]

function unitemss()
	pcall(function()
		local tool
		for i,v in pairs(attack_tools) do
			local t = LP.Character:FindFirstChild(v)
			if t then
				tool = t
				break
			end
		end
		for idx, plr in pairs(Players:GetPlayers()) do
			if
				plr ~= LP and CheckRange(LP.Character.HumanoidRootPart, plr.Character.HumanoidRootPart, 10)
				and plr.Character.Hostile.Value and LP.Team ~= plr.Team and plr.Character.Humanoid.Health ~= 0 
			then
				if plr.Team ~= LP.Team and _G.LockOnhit == false then
						Remotes["UnCuffed"]:FireServer(plr.Character)
						task.wait()
				elseif plr.Team ~= LP.Team and _G.LockOnhit == true then
					if plr.Name == _G.targetr then
						Remotes["UnCuffed"]:FireServer(plr.Character)
						task.wait()
					end
				end
			end
		end
	end) 
end

function attack()
	pcall(function()
		local tool
		for i,v in pairs(attack_tools) do
			local t = LP.Character:FindFirstChild(v)
			if t then
				tool = t
				break
			end
		end
		for idx, plr in pairs(Players:GetPlayers()) do
			if
				plr ~= LP and CheckRange(LP.Character.HumanoidRootPart, plr.Character.HumanoidRootPart, 15)
				and plr.Character.Hostile.Value and LP.Team ~= plr.Team and plr.Character.Humanoid.Health ~= 0 
			then
				if plr.Team.Name == _G.OneTeam then
						Remotes["Combat"]:FireServer(LP.Character, plr.Character.Head, tool)
						task.wait()
				elseif _G.OneTeamhit == false and _G.LockOnhit == false then
					if LP.Team.Name == "Civilian" and plr.Team.Name ~= "Guard" then
						Remotes["Combat"]:FireServer(LP.Character, plr.Character.Head, tool)
						task.wait()
					elseif LP.Team.Name ~= "Civilian" then
						Remotes["Combat"]:FireServer(LP.Character, plr.Character.Head, tool)
						task.wait()
					end
				elseif _G.LockOnhit == true then
					if plr.Name == _G.targetr then
						Remotes["Combat"]:FireServer(LP.Character, plr.Character.Head, tool)
						task.wait()
					end
				end
			end
		end
	end) 
end




game:GetService("UserInputService").InputBegan:Connect(function(inp)
    if inp.KeyCode == Enum.KeyCode.Q then
		--createHitbox()
		if player.Character:FindFirstChild("Axe") then
			anime(7286445304)
			attack()
		elseif player.Character:FindFirstChild("Crowbar") then
			if m2 == true then
			anime(7137390931)
			attack()
			m2 = false
			else
				anime(7137385893)
				attack()
				m2 = true
			end
		elseif player.Character:FindFirstChild("Pickaxe") then
			anime(7098129399)
			attack()
		elseif player.Character:FindFirstChild("Knife") then
			if m1 == true then
				anime(7575196416)
				attack()
				m1 = false
			else
				anime(7562485782)
				attack()
				m1 = true
			end
		elseif player.Character:FindFirstChild("Fist") then
			if m3 == true then
				anime(6884302925)
				attack()
				m3 = false
			else
				anime(6884306689)
				attack()
				m3 = true
			end
		elseif player.Character:FindFirstChild("Hammer") then
			anime(6884398841)
			attack()
		elseif player.Character:FindFirstChild("Food") then
			Remotes["EatingEvent"]:FireServer(
				LP.Character,
				game:GetService("Players").LocalPlayer.Character.Food,
				"Heal")
		elseif player.Character:FindFirstChild("Hamburger") then
			Remotes["EatingEvent"]:FireServer(
				LP.Character,
				game:GetService("Players").LocalPlayer.Character.Hamburger,
				"Heal")
		elseif player.Character:FindFirstChild("Taser") then
			local pos = game:GetService("Players").LocalPlayer.Character.Torso.CFrame.Position
			local tpos = game:GetService("Players"):WaitForChild(_G.targetr).Character.Torso.CFrame.Position
			if player.Character.Taser.Charged.Value == true then
				spawn(function()	
					local args = {
							[1] = "Generate",
							[2] = game:GetService("Players").LocalPlayer.Character.Taser,
							[3] = Vector3.new(pos.X,pos.Y,pos.Z),
							[4] = Vector3.new(tpos.X,tpos.Y,tpos.Z)
						}
						
					game:GetService("ReplicatedStorage"):WaitForChild("Tase"):FireServer(unpack(args))
				end)
					task.wait()
					local args = {
						[1] = "Hit",
						[2] = game:GetService("Players").LocalPlayer.Character.Taser,
						[3] = game:GetService("Players"):WaitForChild(_G.targetr).Character.Head
					}
					game:GetService("ReplicatedStorage"):WaitForChild("Tase"):FireServer(unpack(args))
			elseif player.Character.Taser.Charged.Value == false then
				--wait(0.5)
				anime(8109052918)
				local args = {
					[1] = "Recharge",
					[2] = game:GetService("Players").LocalPlayer.Character.Taser
				}
				
				game:GetService("ReplicatedStorage"):WaitForChild("Tase"):FireServer(unpack(args))
			end
		elseif player.Character:FindFirstChild("Handcuffs") then
			--cuffcalls()
			cufffs()
		elseif player.Character:FindFirstChild("Handcuffs (fugitive)") then
			--cuffcallsf()
			cufff()
		elseif player.Character:FindFirstChild("Rope") then
			hoglast()
			--hogcall()
		end
	end
end)

game:GetService("UserInputService").InputBegan:Connect(function(inp)
    if inp.KeyCode == Enum.KeyCode.F then
		if LP.Character.GrabbingWhom.Value == "" then
			grabRemote()
		else
			local GW = LP.Character.GrabbingWhom.Value
			local WTP = Players:FindFirstChild(GW)
			Remotes["Grab"]:FireServer(WTP.Character, "Drop")
		end
	end
end)

game:GetService("UserInputService").InputBegan:Connect(function(inp)
    if inp.KeyCode == Enum.KeyCode.G then
		unitemss()
	end
end)



local StarterGui = game:GetService("StarterGui")
--[[
game:GetService("UserInputService").InputBegan:Connect(function(inp)
    if inp.KeyCode == Enum.KeyCode.V then
		char = game.Players.LocalPlayer.Character
		spawn(function()
			if char.HumanoidRootPart:FindFirstChild("Client") then
				char.HumanoidRootPart:FindFirstChild("Client"):Destroy()
			end
		end)
		spawn(function()
		anime(7568092298)
		end)
        --char.Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
        local tar = char.HumanoidRootPart.CFrame*CFrame.new(0,15,0) + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * 60
        --char.Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
        local v2 = Instance.new('BodyPosition',char.HumanoidRootPart) 
        local fol = Instance.new('Folder',v2)
        v2.Name = 'Client' 
        v2.MaxForce = Vector3.new(1,1,1)*100000 
        v2.D = 2500 
        v2.P = 60000 
        v2.Position = (tar).p
		wait(0.2)
		v2:Destroy()
	end
end)

]]

game:GetService("UserInputService").InputBegan:Connect(function(inp)
    if inp.KeyCode == Enum.KeyCode.X then
		if LP.Character.HumanoidRootPart.Anchored == false then
			local args = {
				[1] = LP.Character,
				[2] = "Play"
			}
			
			game:GetService("ReplicatedStorage"):WaitForChild("AnimationAnchor"):FireServer(unpack(args))
		else
			local args = {
				[1] = LP.Character,
				[2] = "Stop"
			}
			
			game:GetService("ReplicatedStorage"):WaitForChild("AnimationAnchor"):FireServer(unpack(args))
		end
	end
end)

workspace.ChildRemoved:Connect(onChildRemoved)

print("loading Helper completed")
